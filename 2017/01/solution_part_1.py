"""
Solution for the first puzzle of Day 1
"""

from itertools import tee

import pytest

# My puzzle input



def solve_captcha(digits: str) -> int:
    """
    The captcha requires you to review a sequence of digits (your puzzle input)
    and find the sum of all digits that match the next digit in the list.
    The list is circular, so the digit after the last digit is the first digit in the list.

    For example:

    * 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.
    * 1111 produces 4 because each digit (all 1) matches the next.
    * 1234 produces 0 because no digit matches the next.
    * 91212129 produces 9 because the only digit that matches the next one is the last digit, 9.
    """
    def pairwise(iterable):
        "s -> (s0,s1), (s1,s2), (s2, s3), ..."
        a, b = tee(iterable)
        next(b, None)
        return zip(a, b)

    # append first element to the end of the digits string
    # See the circular requirement
    digits = digits + digits[0]
    # count subsequent digits
    subsequent_digit_sum = sum(int(x) for x, y in pairwise(digits) if x == y)

    return subsequent_digit_sum


@pytest.mark.parametrize('digits, expected_sum', [
    ('1122', 3),
    ('1111', 4),
    ('1234', 0),
    ('12341', 1),
    ('91212129', 9),
    # my puzzle input
    (MY_PUZZLE_INPUT, 1136)
])
def test_solve_captcha(digits, expected_sum):
    """Test the solution"""
    # given & when
    actual_sum = solve_captcha(digits)

    # then
    assert actual_sum == expected_sum
